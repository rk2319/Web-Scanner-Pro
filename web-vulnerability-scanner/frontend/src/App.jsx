import React, { useState, useEffect, useRef } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import ReportGenerator from './components/ReportGenerator';

import { Input } from '@/components/ui/input';
import {
  Shield,
  AlertTriangle,
  Clock,
  AlertCircle,
  CheckCircle,
  XCircle,
  Lock,
  Gauge,
  Terminal,
  Radio,
  Server,
  Download,
  RefreshCcw,
  Eye,
  Code,
  File,
  Link,
  FileSearch,
  Globe,
  Activity,
  Network,
  Database,
  Search,
  BarChart,
  PieChart
} from 'lucide-react';
import { 
  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer,
  RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar 
} from 'recharts';

// Progress Component
const Progress = React.forwardRef(({ className, value, ...props }, ref) => (
  <div className="relative w-full bg-gray-700 rounded-full h-2 overflow-hidden">
    <div
      ref={ref}
      className={`h-full bg-blue-500 transition-all duration-500 ${className}`}
      style={{ width: `${value}%` }}
      {...props}
    />
  </div>
));
Progress.displayName = "Progress";

// Scan Progress Component
const ScanProgress = ({ current, total, phase }) => {
  const percentage = Math.round((current / total) * 100);
  
  return (
    <div className="w-full">
      <div className="flex justify-between mb-2 text-sm text-gray-400">
        <span>{phase || 'Scanning...'}</span>
        <span>{percentage}%</span>
      </div>
      <Progress value={percentage} />
    </div>
  );
};

// Risk Gauge Component
const RiskGauge = ({ score }) => {
  const getColor = (score) => {
    if (score >= 80) return 'text-red-500';
    if (score >= 60) return 'text-orange-500';
    if (score >= 40) return 'text-yellow-500';
    if (score >= 20) return 'text-blue-500';
    return 'text-green-500';
  };

  return (
    <div className="text-center p-4">
      <div className={`text-6xl font-bold ${getColor(score)}`}>
        {score}%
      </div>
      <div className="mt-2 text-gray-400">Risk Score</div>
    </div>
  );
};

// Security Metrics Component
const SecurityMetrics = ({ results }) => {
  const radarData = [
    { subject: 'SSL Security', A: results?.ssl_info?.issues?.length ? 100 - (results.ssl_info.issues.length * 20) : 100 },
    { subject: 'Headers', A: results?.security_headers?.missing?.length ? 100 - (results.security_headers.missing.length * 25) : 100 },
    { subject: 'DNS Security', A: results?.dns_info?.issues?.length ? 100 - (results.dns_info.issues.length * 20) : 100 },
    { subject: 'Port Security', A: results?.port_scan?.filter(p => p.state === 'open').length ? 100 - (results.port_scan.filter(p => p.state === 'open').length * 10) : 100 },
    { subject: 'Content Security', A: results?.content_scan?.issues?.length ? 100 - (results.content_scan.issues.length * 15) : 100 }
  ];

  return (
    <Card className="bg-gray-800 border-gray-700">
      <CardHeader>
        <CardTitle className="text-white flex items-center gap-2">
          <Shield className="h-6 w-6 text-blue-400" />
          Security Analysis
        </CardTitle>
      </CardHeader>
      <CardContent>
        <div className="h-[300px]">
          <ResponsiveContainer width="100%" height="100%">
            <RadarChart data={radarData}>
              <PolarGrid stroke="#4B5563" />
              <PolarAngleAxis dataKey="subject" stroke="#9CA3AF" />
              <PolarRadiusAxis angle={30} domain={[0, 100]} stroke="#4B5563" />
              <Radar
                name="Security Score"
                dataKey="A"
                stroke="#3B82F6"
                fill="#3B82F6"
                fillOpacity={0.5}
              />
            </RadarChart>
          </ResponsiveContainer>
        </div>
      </CardContent>
    </Card>
  );
};

// Live Logs Component
const LiveLogs = () => {
  const [logs, setLogs] = useState([]);
  const logsEndRef = useRef(null);
  const [isConnected, setIsConnected] = useState(false);

  useEffect(() => {
    let eventSource;
    
    const connectSSE = () => {
      eventSource = new EventSource('http://localhost:8000/logs');
      
      eventSource.onopen = () => {
        setIsConnected(true);
        console.log('Connected to logs');
      };

      eventSource.onmessage = (event) => {
        try {
          const log = JSON.parse(event.data);
          if (log.type !== 'keepalive') {
            setLogs(prevLogs => [...prevLogs.slice(-100), log]);
          }
        } catch (error) {
          console.error('Error parsing log:', error);
        }
      };

      eventSource.onerror = (error) => {
        console.error('EventSource failed:', error);
        setIsConnected(false);
        eventSource.close();
        setTimeout(connectSSE, 5000);
      };
    };

    connectSSE();

    return () => {
      if (eventSource) {
        eventSource.close();
      }
    };
  }, []);

  useEffect(() => {
    logsEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [logs]);

  const getLogColor = (type) => {
    switch (type) {
      case 'error': return 'text-red-500';
      case 'warning': return 'text-yellow-500';
      case 'success': return 'text-green-500';
      default: return 'text-blue-500';
    }
  };

  const getLogIcon = (type) => {
    switch (type) {
      case 'error': return <XCircle className="h-4 w-4 text-red-500" />;
      case 'warning': return <AlertTriangle className="h-4 w-4 text-yellow-500" />;
      case 'success': return <CheckCircle className="h-4 w-4 text-green-500" />;
      default: return <Terminal className="h-4 w-4 text-blue-400" />;
    }
  };

  return (
    <Card className="bg-gray-800 border-gray-700 mt-6">
      <CardHeader className="flex flex-row items-center justify-between">
        <CardTitle className="text-white flex items-center gap-2">
          <Terminal className="h-5 w-5 text-blue-400" />
          Live Scan Logs
        </CardTitle>
        <div className={`flex items-center gap-2 ${isConnected ? 'text-green-500' : 'text-red-500'}`}>
          <div className={`h-2 w-2 rounded-full ${isConnected ? 'bg-green-500' : 'bg-red-500'}`}></div>
          {isConnected ? 'Connected' : 'Reconnecting...'}
        </div>
      </CardHeader>
      <CardContent>
        <div className="h-64 overflow-y-auto bg-gray-900 rounded-md p-4 font-mono text-sm custom-scrollbar">
          {logs.length === 0 ? (
            <div className="text-gray-400 text-center p-4">
              Waiting for scan logs...
            </div>
          ) : (
            logs.map((log, index) => (
              <div key={index} className={`flex items-start gap-2 mb-2 fade-in ${getLogColor(log.type)}`}>
                {getLogIcon(log.type)}
                <span className="text-gray-400 min-w-[100px]">
                  [{new Date(log.timestamp).toLocaleTimeString()}]
                </span>
                <span className="break-all">{log.message}</span>
              </div>
            ))
          )}
          <div ref={logsEndRef} />
        </div>
      </CardContent>
    </Card>
  );
};

// Timeline Chart Component
const TimelineChart = ({ data }) => {
  const chartData = data.map((item, index) => ({
    name: `Step ${index + 1}`,
    value: item.progress
  }));

  return (
    <div className="h-[200px]">
      <ResponsiveContainer width="100%" height="100%">
        <LineChart data={chartData}>
          <CartesianGrid strokeDasharray="3 3" stroke="#4B5563" />
          <XAxis dataKey="name" stroke="#9CA3AF" />
          <YAxis stroke="#9CA3AF" />
          <Tooltip 
            contentStyle={{ 
              backgroundColor: '#1F2937',
              border: 'none',
              borderRadius: '0.375rem',
              color: '#F3F4F6'
            }}
          />
          <Line 
            type="monotone" 
            dataKey="value" 
            stroke="#3B82F6" 
            strokeWidth={2}
          />
        </LineChart>
      </ResponsiveContainer>
    </div>
  );
};

// Main App Component
const App = () => {
  const [url, setUrl] = useState('');
  const [scanning, setScanning] = useState(false);
  const [results, setResults] = useState(null);
  const [error, setError] = useState(null);
  const [scanProgress, setScanProgress] = useState({ current: 0, total: 100 });
  const [scanPhase, setScanPhase] = useState('');
  const [scanHistory, setScanHistory] = useState([]);

  const handleScan = async () => {
    setScanning(true);
    setError(null);
    setResults(null);
    setScanProgress({ current: 0, total: 100 });
    setScanPhase('Initializing scan...');

    try {
      // Update scan history
      setScanHistory(prev => [...prev, { timestamp: new Date(), progress: 0 }]);

      setScanProgress({ current: 10, total: 100 });
      setScanPhase('Checking basic security...');
      setScanHistory(prev => [...prev, { timestamp: new Date(), progress: 10 }]);

      const response = await fetch('http://localhost:8000/scan', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ url }),
      });

      setScanProgress({ current: 50, total: 100 });
      setScanPhase('Analyzing vulnerabilities...');
      setScanHistory(prev => [...prev, { timestamp: new Date(), progress: 50 }]);

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || 'Scan failed. Please try again.');
      }

      setScanProgress({ current: 80, total: 100 });
      setScanPhase('Gathering results...');
      setScanHistory(prev => [...prev, { timestamp: new Date(), progress: 80 }]);

      const processedResults = {
        ...data,
        risk_score: data.risk_assessment?.score || 0,
        total_issues: data.summary?.total_issues || 0,
        code_issues: (data.vulnerabilities || []).length,
        visual_issues: (data.content_scan?.visual_elements || []).length,
        resource_issues: (data.content_scan?.resource_issues || []).length
      };

      setScanProgress({ current: 100, total: 100 });
      setScanPhase('Scan completed successfully!');
      setScanHistory(prev => [...prev, { timestamp: new Date(), progress: 100 }]);
      setResults(processedResults);
    } catch (err) {
      setError(err.message || 'Failed to complete the scan. Please try again.');
    } finally {
      setScanning(false);
    }
  };

  const handleExport = () => {
    if (!results) return;

    const element = document.createElement("a");
    const file = new Blob([JSON.stringify(results, null, 2)], {
      type: 'application/json'
    });
    element.href = URL.createObjectURL(file);
    element.download = `security-scan-${new Date().toISOString()}.json`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-900 to-gray-800 text-white p-8">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold flex items-center justify-center gap-2">
            <Shield className="h-8 w-8 text-blue-400" />
            Web Security Scanner Pro
          </h1>
          <p className="text-gray-400 mt-2">
            Comprehensive security analysis and vulnerability assessment tool
          </p>
        </div>

        {/* Scan Input */}
        <Card className="bg-gray-800 border-gray-700">
          <CardHeader>
            <CardTitle className="text-white">Start Security Scan</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex gap-4">
              <Input
                type="url"
                placeholder="Enter website URL (e.g., example.com)"
                value={url}
                onChange={(e) => setUrl(e.target.value)}
                className="flex-grow bg-gray-700 border-gray-600 text-white"
              />
              <Button 
                onClick={handleScan}
                disabled={scanning || !url}
                className="bg-blue-500 hover:bg-blue-600 text-white"
              >
                {scanning ? (
                  <>
                    <Clock className="mr-2 h-4 w-4 animate-spin" />
                    Scanning
                  </>
                ) : (
                  <>
                    <Search className="mr-2 h-4 w-4" />
                    Start Scan
                  </>
                )}
              </Button>
            </div>
            
            {error && (
              <div className="mt-4 p-4 bg-red-900/50 text-red-200 rounded-md flex items-center gap-2">
                <AlertCircle className="h-5 w-5" />
                {error}
              </div>)}
          </CardContent>
        </Card>

        {/* Live Logs */}
        <LiveLogs />

        {/* Scanning Progress */}
        {scanning && (
          <Card className="mt-6 bg-gray-800 border-gray-700">
            <CardContent className="p-6">
              <div className="flex flex-col items-center">
                <div className="relative w-16 h-16 mb-4">
                  <div className="absolute inset-0 rounded-full border-4 border-blue-500/30 animate-ping"></div>
                  <div className="absolute inset-0 rounded-full border-4 border-blue-500 border-t-transparent animate-spin"></div>
                </div>
                <p className="text-xl mb-4">Performing Security Scan...</p>
                <div className="w-full max-w-md">
                  <ScanProgress 
                    current={scanProgress.current} 
                    total={scanProgress.total}
                    phase={scanPhase}
                  />
                </div>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Results Section */}
        {results && (
          <div id="scan-results" className="space-y-6 mt-6">
            {/* Security Overview */}
            <Card className="bg-gray-800 border-gray-700">
              <CardHeader>
                <CardTitle className="text-white flex items-center gap-2">
                  <Shield className="h-6 w-6 text-blue-400" />
                  Security Overview
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
                  <div className="col-span-1 md:col-span-2">
                    <RiskGauge score={results.risk_score} />
                  </div>
                  <div className="col-span-1">
                    <div className="text-center">
                      <AlertTriangle className="h-8 w-8 text-yellow-400 mx-auto mb-2" />
                      <div className="text-2xl font-bold text-yellow-400">
                        {results.total_issues}
                      </div>
                      <div className="text-sm text-gray-400">Total Issues</div>
                    </div>
                  </div>
                  <div className="col-span-1">
                    <div className="text-center">
                      <Shield className="h-8 w-8 text-green-400 mx-auto mb-2" />
                      <div className="text-2xl font-bold text-green-400">
                        {results.passed_checks || 0}
                      </div>
                      <div className="text-sm text-gray-400">Passed Checks</div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Security Metrics and Analysis */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <SecurityMetrics results={results} />
              <Card className="bg-gray-800 border-gray-700">
                <CardHeader>
                  <CardTitle className="text-white flex items-center gap-2">
                    <Activity className="h-6 w-6 text-blue-400" />
                    Scan Progress Timeline
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <TimelineChart data={scanHistory} />
                </CardContent>
              </Card>
            </div>

            {/* Issues Summary */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <Card className="bg-gray-800 border-gray-700">
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <Code className="h-6 w-6 text-blue-400 mb-2" />
                      <div className="text-lg font-semibold">Code Issues</div>
                      <div className="text-2xl font-bold text-blue-400">
                        {results.code_issues}
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card className="bg-gray-800 border-gray-700">
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <Eye className="h-6 w-6 text-purple-400 mb-2" />
                      <div className="text-lg font-semibold">Visual Issues</div>
                      <div className="text-2xl font-bold text-purple-400">
                        {results.visual_issues}
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card className="bg-gray-800 border-gray-700">
                <CardContent className="p-6">
                  <div className="flex items-center justify-between">
                    <div>
                      <Link className="h-6 w-6 text-green-400 mb-2" />
                      <div className="text-lg font-semibold">Resource Issues</div>
                      <div className="text-2xl font-bold text-green-400">
                        {results.resource_issues}
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Detailed Results */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Security Headers */}
              {results.security_headers && (
                <Card className="bg-gray-800 border-gray-700">
                  <CardHeader>
                    <CardTitle className="text-white flex items-center gap-2">
                      <Shield className="h-6 w-6 text-blue-400" />
                      Security Headers
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {results.security_headers.missing?.map((header, index) => (
                        <div key={index} className="flex items-start gap-2 p-3 bg-gray-700 rounded-lg">
                          <AlertTriangle className="h-5 w-5 text-yellow-400 mt-1" />
                          <div>
                            <div className="font-semibold">{header.header}</div>
                            <div className="text-sm text-gray-400">{header.description}</div>
                          </div>
                        </div>
                      ))}
                      {results.security_headers.present?.map((header, index) => (
                        <div key={index} className="flex items-start gap-2 p-3 bg-gray-700/50 rounded-lg">
                          <CheckCircle className="h-5 w-5 text-green-400 mt-1" />
                          <div>
                            <div className="font-semibold">{header.header}</div>
                            <div className="text-sm text-gray-400">{header.value}</div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              )}

              {/* SSL Information */}
              {results.ssl_info && (
                <Card className="bg-gray-800 border-gray-700">
                  <CardHeader>
                    <CardTitle className="text-white flex items-center gap-2">
                      <Lock className="h-6 w-6 text-blue-400" />
                      SSL/TLS Information
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {results.ssl_info.issues?.map((issue, index) => (
                        <div key={index} className="p-3 bg-gray-700 rounded-lg">
                          <div className="flex items-center gap-2 mb-2">
                            <AlertTriangle className="h-5 w-5 text-yellow-400" />
                            <span className="font-semibold">{issue.type}</span>
                          </div>
                          <p className="text-gray-400 text-sm">{issue.description}</p>
                        </div>
                      ))}
                      {!results.ssl_info.issues?.length && (
                        <div className="flex items-center gap-2 p-3 bg-green-900/20 text-green-300 rounded-lg">
                          <CheckCircle className="h-5 w-5" />
                          <span>SSL configuration appears secure</span>
                        </div>
                      )}
                    </div>
                  </CardContent>
                </Card>
              )}
            </div>

            {/* Vulnerabilities Section */}
            {results.vulnerabilities && results.vulnerabilities.length > 0 && (
              <Card className="bg-gray-800 border-gray-700">
                <CardHeader>
                  <CardTitle className="text-white flex items-center gap-2">
                    <AlertTriangle className="h-6 w-6 text-yellow-400" />
                    Vulnerabilities Found
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {results.vulnerabilities.map((vuln, index) => (
                      <div key={index} className="p-4 bg-gray-700 rounded-lg">
                        <div className="flex items-center justify-between mb-2">
                          <div className="flex items-center gap-2">
                            {vuln.severity === 'Critical' && <XCircle className="h-5 w-5 text-red-500" />}
                            {vuln.severity === 'High' && <AlertTriangle className="h-5 w-5 text-orange-500" />}
                            {vuln.severity === 'Medium' && <AlertCircle className="h-5 w-5 text-yellow-500" />}
                            <h3 className="text-lg font-semibold">{vuln.type}</h3>
                          </div>
                          <span className={`px-2 py-1 rounded-full text-xs ${
                            vuln.severity === 'Critical' ? 'bg-red-900 text-red-300' :
                            vuln.severity === 'High' ? 'bg-orange-900 text-orange-300' :
                            'bg-yellow-900 text-yellow-300'
                          }`}>
                            {vuln.severity}
                          </span>
                        </div>
                        <p className="text-gray-300 mb-2">{vuln.description}</p>
                        {vuln.recommendation && (
                          <div className="mt-2 p-3 bg-gray-800 rounded-md">
                            <div className="font-semibold text-blue-400 mb-1">Recommendation:</div>
                            <p className="text-gray-300">{vuln.recommendation}</p>
                          </div>
                        )}
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            )}

            {/* Export & Rescan Buttons */}
            <div className="flex justify-end gap-4">
              <Button 
                onClick={handleExport}
                className="bg-gray-700 hover:bg-gray-600 flex items-center gap-2"
              >
                <Download className="h-4 w-4" />
                Export JSON
              </Button>
              <ReportGenerator results={results} />
              <Button 
                onClick={handleScan}
                className="bg-blue-500 hover:bg-blue-600 flex items-center gap-2"
              >
                <RefreshCcw className="h-4 w-4" />
                Rescan
              </Button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default App;