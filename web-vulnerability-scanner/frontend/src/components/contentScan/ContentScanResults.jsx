import React from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '../ui/card';
import { SeverityBadge } from '../../../../../src/components/SeverityBadge';
import {
  Eye,
  Code,
  AlertOctagon,
  Link,
  Accessibility,
  Search,
  AlertTriangle,
  AlertCircle,
  Info,
  Circle
} from 'lucide-react';

const getIssueIcon = (risk_level) => {
  switch (risk_level?.toLowerCase()) {
    case 'high':
      return <AlertTriangle className="h-5 w-5 text-red-500" />;
    case 'medium':
      return <AlertCircle className="h-5 w-5 text-yellow-500" />;
    case 'low':
      return <Info className="h-5 w-5 text-blue-500" />;
    default:
      return <Circle className="h-5 w-5 text-gray-500" />;
  }
};

const IssueCard = ({ issue }) => (
  <Card className="bg-gray-700 border-gray-600">
    <CardContent className="p-4">
      <div className="flex items-start justify-between">
        <div className="flex items-start gap-3">
          {getIssueIcon(issue.risk_level)}
          <div>
            <h4 className="font-semibold text-white">{issue.type}</h4>
            {issue.source && (
              <p className="text-sm text-gray-400 mt-1">Source: {issue.source}</p>
            )}
            {issue.pattern && (
              <p className="text-sm text-gray-400 mt-1">Pattern: {issue.pattern}</p>
            )}
            {issue.issue && (
              <p className="text-sm text-gray-400 mt-1">Issue: {issue.issue}</p>
            )}
            {issue.recommendation && (
              <div className="mt-2 p-2 bg-gray-800 rounded">
                <p className="text-sm text-blue-400">Recommendation:</p>
                <p className="text-sm text-gray-300">{issue.recommendation}</p>
              </div>
            )}
          </div>
        </div>
        {issue.risk_level && (
          <SeverityBadge severity={issue.risk_level} />
        )}
      </div>
    </CardContent>
  </Card>
);

const ContentScanResults = ({ results }) => {
  if (!results?.content_scan) return null;

  const {
    visual_elements,
    code_structure,
    malicious_content,
    resource_issues,
    accessibility_issues,
    seo_issues
  } = results.content_scan;

  return (
    <div className="space-y-6">
      {/* Visual Elements Section */}
      {visual_elements?.length > 0 && (
        <Card className="bg-gray-800 border-gray-700">
          <CardHeader>
            <CardTitle className="text-white flex items-center gap-2">
              <Eye className="h-6 w-6 text-blue-400" />
              Visual Elements Analysis
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {visual_elements.map((issue, index) => (
                <IssueCard key={index} issue={issue} />
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Code Structure Section */}
      {Object.entries(code_structure).some(([_, issues]) => issues.length > 0) && (
        <Card className="bg-gray-800 border-gray-700">
          <CardHeader>
            <CardTitle className="text-white flex items-center gap-2">
              <Code className="h-6 w-6 text-blue-400" />
              Code Structure Analysis
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-6">
              {Object.entries(code_structure).map(([type, issues]) => 
                issues.length > 0 && (
                  <div key={type} className="space-y-4">
                    <h3 className="text-lg font-semibold text-white capitalize">{type} Issues</h3>
                    {issues.map((issue, index) => (
                      <IssueCard key={index} issue={issue} />
                    ))}
                  </div>
                )
              )}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Other sections... */}
      {/* Add similar sections for malicious_content, resource_issues, accessibility_issues, and seo_issues */}
    </div>
  );
};

export default ContentScanResults;