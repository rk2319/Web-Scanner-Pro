import React from 'react';
import { pdf } from '@react-pdf/renderer';
import { Button } from '@/components/ui/button';
import { FileDown } from 'lucide-react';

const generatePDF = async (results) => {
  const styles = {
    page: {
      padding: 30,
      backgroundColor: '#FFFFFF',
    },
    section: {
      margin: 10,
      padding: 10,
    },
    text: {
      fontSize: 12,
      marginBottom: 5,
    },
    header: {
      fontSize: 24,
      marginBottom: 20,
    }
  };

  const formatDate = (date) => {
    return new Date(date).toLocaleDateString();
  };

  // Create the PDF content
  const content = {
    pageSize: 'A4',
    pageMargins: [40, 60, 40, 60],
    content: [
      // Header
      {
        text: 'Web Security Scan Report',
        style: 'header',
        alignment: 'center'
      },
      {
        text: `Generated on ${formatDate(new Date())}`,
        alignment: 'center',
        margin: [0, 0, 0, 20]
      },

      // Target Information
      {
        text: 'Scan Target',
        style: 'sectionHeader'
      },
      {
        text: `URL: ${results.url}`,
        margin: [0, 5]
      },
      {
        text: `Scan Time: ${results.scan_time}`,
        margin: [0, 5]
      },
      {
        text: `Risk Score: ${results.risk_assessment.score}%`,
        margin: [0, 5]
      },

      // Executive Summary
      {
        text: 'Executive Summary',
        style: 'sectionHeader',
        margin: [0, 20, 0, 10]
      },
      {
        ul: [
          `Total Issues: ${results.summary.total_issues}`,
          `Critical Issues: ${results.summary.critical}`,
          `High Issues: ${results.summary.high}`,
          `Medium Issues: ${results.summary.medium}`,
          `Low Issues: ${results.summary.low}`
        ]
      },

      // Security Headers
      {
        text: 'Security Headers',
        style: 'sectionHeader',
        margin: [0, 20, 0, 10]
      },
      ...(results.security_headers?.missing || []).map(header => ({
        text: `Missing: ${header.header} - ${header.description}`,
        color: 'red',
        margin: [0, 5]
      })),
      ...(results.security_headers?.present || []).map(header => ({
        text: `Present: ${header.header} - ${header.value}`,
        color: 'green',
        margin: [0, 5]
      })),

      // Vulnerabilities
      {
        text: 'Detected Vulnerabilities',
        style: 'sectionHeader',
        margin: [0, 20, 0, 10]
      },
      ...(results.vulnerabilities || []).map(vuln => ([
        {
          text: `${vuln.severity}: ${vuln.type}`,
          color: vuln.severity === 'Critical' ? 'red' : 
                 vuln.severity === 'High' ? 'orange' : 'black',
          margin: [0, 10, 0, 5]
        },
        {
          text: vuln.description,
          margin: [0, 0, 0, 5]
        },
        vuln.recommendation ? {
          text: `Recommendation: ${vuln.recommendation}`,
          margin: [0, 0, 0, 10],
          fontSize: 10
        } : {}
      ])).flat()
    ],
    styles: {
      header: {
        fontSize: 24,
        bold: true
      },
      sectionHeader: {
        fontSize: 16,
        bold: true,
        margin: [0, 10, 0, 5]
      }
    },
    defaultStyle: {
      fontSize: 12
    }
  };

  return content;
};

const ReportGenerator = ({ results }) => {
  const handleDownload = async () => {
    try {
      const content = await generatePDF(results);
      const blob = new Blob([JSON.stringify(content)], { type: 'application/pdf' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `security-scan-report-${new Date().toISOString()}.pdf`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error('Error generating PDF:', error);
    }
  };

  return (
    <Button
      onClick={handleDownload}
      className="bg-blue-600 hover:bg-blue-700 text-white"
    >
      <FileDown className="w-4 h-4 mr-2" />
      Download PDF Report
    </Button>
  );
};

export default ReportGenerator;