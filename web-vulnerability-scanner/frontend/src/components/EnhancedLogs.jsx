import React, { useState, useEffect, useRef } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from './ui/card';
import { Button } from './ui/button';
import { Input } from './ui/input';
import {
  Terminal,
  AlertTriangle,
  CheckCircle,
  XCircle,
  Clock
} from 'lucide-react';

const getLogColor = (type) => {
  switch (type) {
    case 'error': return 'text-red-500';
    case 'warning': return 'text-yellow-500';
    case 'success': return 'text-green-500';
    default: return 'text-blue-500';
  }
};

const getLogIcon = (type) => {
  switch (type) {
    case 'error': return <XCircle className="h-4 w-4 text-red-500" />;
    case 'warning': return <AlertTriangle className="h-4 w-4 text-yellow-500" />;
    case 'success': return <CheckCircle className="h-4 w-4 text-green-500" />;
    default: return <Terminal className="h-4 w-4 text-blue-400" />;
  }
};

const getLogDetails = (log) => {
  if (log.details) {
    switch (log.category) {
      case 'content_scan':
        return (
          <div className="ml-6 mt-2 space-y-1 text-sm">
            {log.details.type && (
              <div className="flex items-center gap-2">
                <span className="text-gray-400">Type:</span>
                <span className={getTypeColor(log.details.type)}>{log.details.type}</span>
              </div>
            )}
            {log.details.pattern && (
              <div className="flex items-center gap-2">
                <span className="text-gray-400">Pattern:</span>
                <code className="bg-gray-800 px-2 py-1 rounded text-yellow-400">
                  {log.details.pattern}
                </code>
              </div>
            )}
            {log.details.recommendation && (
              <div className="flex items-center gap-2">
                <span className="text-gray-400">Recommendation:</span>
                <span className="text-blue-400">{log.details.recommendation}</span>
              </div>
            )}
          </div>
        );
      default:
        return null;
    }
  }
  return null;
};

const getTypeColor = (type) => {
  switch (type?.toLowerCase()) {
    case 'malicious':
      return 'text-red-400';
    case 'suspicious':
      return 'text-yellow-400';
    case 'visual':
      return 'text-purple-400';
    case 'code':
      return 'text-blue-400';
    default:
      return 'text-gray-400';
  }
};

export const EnhancedLogs = () => {
  // ... Rest of the LiveLogs component code ...
  // Copy the state management and other functions from the previous LiveLogs component
};