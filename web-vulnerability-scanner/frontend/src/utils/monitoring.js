// src/utils/monitoring.js
export const calculateMetrics = (data) => {
    return {
      requestRate: data.length / 60,  // requests per minute
      errorRate: data.filter(d => d.status >= 400).length / data.length,
      averageResponseTime: data.reduce((acc, curr) => acc + curr.responseTime, 0) / data.length
    };
  };
  
  export const analyzeThreats = (data) => {
    const threats = [];
    
    // Check for suspicious patterns
    const suspiciousIPs = new Set();
    const rateLimits = new Map();
    
    data.forEach(request => {
      // Rate limiting check
      if (rateLimits.has(request.ip)) {
        if (rateLimits.get(request.ip) > 100) {  // 100 requests per minute threshold
          threats.push({
            type: 'RATE_LIMIT_EXCEEDED',
            ip: request.ip,
            severity: 'high'
          });
        }
        rateLimits.set(request.ip, rateLimits.get(request.ip) + 1);
      } else {
        rateLimits.set(request.ip, 1);
      }
      
      // Pattern detection
      if (request.url.includes('../') || request.url.includes('..%2F')) {
        threats.push({
          type: 'PATH_TRAVERSAL_ATTEMPT',
          ip: request.ip,
          severity: 'high'
        });
      }
    });
    
    return threats;
  };